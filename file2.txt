comandos :
 - para agregar cambios:
	$ git add file3.txt
 - comando para identificar los cambios hechos en el archivo
	$ git diff --cached 
 - para consolidad los cambios
	$ git commit -m "Commit Inicial" 
 -para clonar un repositorio:
	$ git clone https://github.com/codeheroco/tutorial-git.git
 -direccion remota de nuestro repositorio  en github
	$ git remote   
 - para ver la direccion del repositorio remoto
	$ git remote -v
 -conectar tu pc local con el servidor:
	$ git push origin master 
  -comando para bajar los cambios el proyecto de tu repositorio
	$ git fetch origin
 - descarga los cambios que se encuentren en el repositorio remoto y los unifica con los cambios que tegamos en nuestra pc
	$ git pull

- para generar claves ssh para conectar tu pc a tu repositorio:
	1.-comprobar si tienes un archivo shh en tu  pc
	  $cd ~/.ssh
	  $ls
	  # Lists the files in your .ssh directory

	2.- Generar new ssh Key
	 - $ ssh-keygen -t rsa -C "your_email@example.com"
	 - $ ssh-add id_rsa

	3.- copia tu clave al portapapeles
	 -$ clip < ~/.ssh/id_rsa.pub
	
	4.- depues tienes que ir a 
		https://github.com/settings/ssh
		y pegar el codigo que se encuentra en el archivo
			C:\Users\davidc\.ssh/id_rsa.pub 

	5.-testear la conexion 
	 -$ ssh -T git@github.com
	luego te pide que te autentifiques y escribes tu contraseña de github:
	una vez todo conforme te aparecera:
		"Hi username! You've successfully authenticated, but GitHub does not
		# provide shell access."
	






---------------------------------crea un repositorio nuevo-----------------
-Crea un directorio nuevo, ábrelo y ejecuta
	git init
-para crear un nuevo repositorio de git.

---------------------hacer checkout a un repositorio------------------
-Crea una copia local del repositorio ejecutando
	git clone /path/to/repository
-Si utilizas un servidor remoto, ejecuta
	git clone username@host:/path/to/repository


---------------------flujo de trabajo--------------------------------
Tu repositorio local esta compuesto por tres "árboles" administrados por git. 
	El primero es tu Directorio de trabajo que contiene los archivos, 
	el segundo es el Index que actua como una zona intermedia, y 
	el último es el HEAD que apunta al último commit realizado.


----------------------RAMAS-------------------------------
-Crea una nueva rama llamada "feature_x" y cámbiate a ella usando
	git checkout -b feature_x
-vuelve a la rama principal
	git checkout master
-y borra la rama
	git branch -d feature_x
-Una rama nueva no estará disponible para los demás a menos que subas (push) la rama a tu repositorio remoto
	git push origin <branch>

-----------------------------add & commit-----------------
-Puedes registrar cambios (añadirlos al Index) usando
	git add <filename>
	git add .
-Este es el primer paso en el flujo de trabajo básico. Para hacer commit a estos cambios usa
	git commit -m "Commit message"
-Ahora el archivo esta incluído en el HEAD, pero aún no en tu repositorio remoto.


-------------------------envío de cambios--------------------
-Tus cambios están ahora en el HEAD de tu copia local. Para enviar estos cambios a tu repositorio remoto ejecuta 
	git push origin master
-Reemplaza master por la rama a la que quieres enviar tus cambios. 

-Si no has clonado un repositorio ya existente y quieres conectar tu repositorio local a un repositorio remoto, usa
	git remote add origin <server>
-Ahora podrás subir tus cambios al repositorio remoto seleccionado.


---------------------actualiza & fusiona--------------------------
-Para actualizar tu repositorio local al commit más nuevo, ejecuta 
	git pull
-en tu directorio de trabajo para bajar y fusionar los cambios remotos.
Para fusionar otra rama a tu rama activa (por ejemplo master), utiliza
	git merge <branch>
-en ambos casos git intentará fusionar automáticamente los cambios. Desafortunadamente, no siempre será posible y se podrán producir conflictos. Tú eres responsable de fusionar esos conflictos manualmente al editar los archivos mostrados por git. Después de modificarlos, necesitas marcarlos como fusionados con
	git add <filename>
-Antes de fusionar los cambios, puedes revisarlos usando
	git diff <source_branch> <target_branch>




-----------------------------etiquetas----------------------------------
-Se recomienda crear etiquetas para cada nueva versión publicada de un software. Este concepto no es nuevo, ya que estaba disponible en SVN. Puedes crear una nueva etiqueta llamada 1.0.0 ejecutando
	git tag 1.0.0 1b2e1d63ff
-1b2e1d63ff se refiere a los 10 caracteres del commit id al cual quieres referirte con tu etiqueta. Puedes obtener el commit id con 
	git log
también puedes usar menos caracteres que el commit id, pero debe ser un valor único.


---------------------------------reemplaza cambios locales-----------------------------------
En caso de que hagas algo mal (lo que seguramente nunca suceda ;) puedes reemplazar cambios locales usando el comando
	git checkout -- <filename>
-Este comando reemplaza los cambios en tu directorio de trabajo con el último contenido de HEAD. Los cambios que ya han sido agregados al Index, así como también los nuevos archivos, se mantendrán sin cambio.

-Por otro lado, si quieres deshacer todos los cambios locales y commits, puedes traer la última versión del servidor y apuntar a tu copia local principal de esta forma
	git fetch origin
	git reset --hard origin/master











